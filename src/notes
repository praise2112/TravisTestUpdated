/* eslint global-require: off, no-console: off */

/**
 * This module executes inside of electron's main process. You can start
 * electron renderer process from here and communicate with the other processes
 * through IPC.
 *
 * When running `yarn build` or `yarn build:main`, this file is compiled to
 * `./src/main.prod.js` using webpack. This gives us some performance wins.
 */
import 'core-js/stable';
import 'regenerator-runtime/runtime';
import path from 'path';
import { app, BrowserWindow, shell } from 'electron';
import { autoUpdater } from 'electron-updater';
import log from 'electron-log';
import MenuBuilder from './menu';
import {Panel} from 'electron-panel-window'

// const electronPanelWindow = process.platform === 'darwin' ? require('@akiflow/electron-panel-window') : undefined
// const _BrowserWindow = electronPanelWindow.Panel || BrowserWindow
const isDarwin = process.platform !== 'darwin'

export default class AppUpdater {
  constructor() {
    log.transports.file.level = 'info';
    autoUpdater.logger = log;
    autoUpdater.checkForUpdatesAndNotify();
  }
}

let mainWindow: BrowserWindow | null = null;
let fakeWindow: BrowserWindow | null = null;

if (process.env.NODE_ENV === 'production') {
  const sourceMapSupport = require('source-map-support');
  sourceMapSupport.install();
}

if (
  process.env.NODE_ENV === 'development' ||
  process.env.DEBUG_PROD === 'true'
) {
  require('electron-debug')();
}

const installExtensions = async () => {
  const installer = require('electron-devtools-installer');
  const forceDownload = !!process.env.UPGRADE_EXTENSIONS;
  const extensions = ['REACT_DEVELOPER_TOOLS'];

  return installer
    .default(
      extensions.map((name) => installer[name]),
      forceDownload
    )
    .catch(console.log);
};

const createWindow = async () => {
  if (
    process.env.NODE_ENV === 'development' ||
    process.env.DEBUG_PROD === 'true'
  ) {
    await installExtensions();
  }

  const RESOURCES_PATH = app.isPackaged
    ? path.join(process.resourcesPath, 'assets')
    : path.join(__dirname, '../assets');

  const getAssetPath = (...paths: string[]): string => {
    return path.join(RESOURCES_PATH, ...paths);
  };

  //  mainWindow = new BrowserWindow({
  //   show: false,
  //   width: 400,
  //   height: 300,
  //   icon: getAssetPath('icon.png'),
  //   webPreferences: {
  //     nodeIntegration: true,
  //   },
  //   skipTaskbar: true,
  //   frame: true,
  //   titleBarStyle: 'hidden'
  // });

  mainWindow = new Panel({
    show: false,
    width: 300,
    height: 300,
    focusable: true,
    icon: getAssetPath('icon.png'),
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false
    },
    // important for mac
    frame: false,
    fullscreenable: false,
    minimizable: false,
    maximizable: false,
    closable: false,
    titleBarStyle: 'customButtonsOnHover' 

    // titleBarStyle: 'customButtonsOnHover'
    // fullScreen: false,
    });

  // Make window stay over any app
  if (process.platform === 'darwin') {
    // mainWindow?.setMaximizable(false)
    // mainWindow?.setMinimizable(false)
    console.log("hidding")
    // app.dock.hide();
    console.log(mainWindow?.isMinimizable())
    console.log(mainWindow?.isMinimized())
    console.log(mainWindow?.isMaximized())
    console.log(mainWindow?.isResizable())
    console.log("===")
    // mainWindow?.setMinimizable(true)
    // mainWindow?.setMaximizable(true)
    console.log(mainWindow?.isMinimizable())
    console.log(mainWindow?.isMinimized())
    console.log(mainWindow?.isMaximized())
    console.log(mainWindow?.isResizable())


    console.log(app.dock.isVisible())
  }
  // mainWindow.setSkipTaskbar(true)
  // mainWindow.setResizable(true)
  
  mainWindow.setAlwaysOnTop(true, 'screen-saver');
  // mainWindow.setAlwaysOnTop(true, 'floating');

  // mac
  mainWindow.setResizable(true)
  if(!isDarwin) mainWindow.setVisibleOnAllWorkspaces(true);
  mainWindow.setFullScreenable(false);
  app.dock.show();


  mainWindow.loadURL(`file://${__dirname}/index.html`);
  // require('electron-traffic-light')(mainWindow)

  // @TODO: Use 'ready-to-show' event
  //        https://github.com/electron/electron/blob/master/docs/api/browser-window.md#using-ready-to-show-event
  mainWindow.webContents.on('did-finish-load', () => {
    if (!mainWindow) {
      throw new Error('"mainWindow" is not defined');
    }
    if (process.env.START_MINIMIZED) {
      mainWindow.minimize();
    } else {
      console.log(mainWindow)
      console.log(mainWindow?.isVisible())
      // console.log(mainWindow2)
      mainWindow.show();
      mainWindow.focus();
      console.log(mainWindow?.isVisible())
    }
  });

  // setTimeout(()=>{
  //   mainWindow?.hide()
  // }, 7000)
  console.log(mainWindow?.isVisible())


  mainWindow.on('closed', () => {
    console.log("closed")
    mainWindow = null;
  });

  mainWindow.on('focus', () => {
    console.log("closed")
    mainWindow = null;
  });

  mainWindow.on('blur', () => {
    console.log("closed")
    mainWindow = null;
  });

  mainWindow.on('close', () => {
    console.log("closing")
    mainWindow = null;
  });

  mainWindow.on('hide', () => {
    console.log('hiding')
    console.log(mainWindow)
  });

  const menuBuilder = new MenuBuilder(mainWindow);
  menuBuilder.buildMenu();

  // Open urls in the user's browser
  mainWindow.webContents.on('new-window', (event, url) => {
    event.preventDefault();
    shell.openExternal(url);
  });

  fakeWindow = mainWindow

  // Remove this if your app does not use auto updates
  // eslint-disable-next-line
  new AppUpdater();
};

/**
 * Add event listeners...
 */

 app.on('will-quit', ()=>{
   console.log('will quit')
 })

 app.on('quit', ()=>{
  console.log('will quit')
})

app.on('before-quit', ()=>{
  console.log('will quit')
})

app.on('activate', ()=>{
  console.log('will quit')
})
app.on('will-continue-activity', ()=>{
  console.log('will quit')
})

app.on('continue-activity', ()=>{
  console.log('will quit')
})

app.on('browser-window-blur', (event, win) => {
    console.log('Ignore this case')
})

app.on('window-all-closed', () => {
  console.log("should quit")
  // Respect the OSX convention of having the application in memory even
  // after all windows have been closed
  if (isDarwin) {
    mainWindow?.destroy()
    app.quit();
  }
});

app.whenReady().then(createWindow).catch(console.log);

app.on('activate', () => {
  console.log("weeeeee")
  console.log(mainWindow)
  console.log(mainWindow?.isVisible())
  // createWindow()
  // mainWindow = fakeWindow

  mainWindow?.show()

  // On macOS it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (mainWindow === null) createWindow();

  // createWindow();
  // else{
  // mainWindow.show()
  // mainWindow.focus();
  // }

});
